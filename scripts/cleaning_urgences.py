"""
Nettoyage des donn√©es URGENCES
Objectif : Passer de d√©partemental √† r√©gional, filtrer "Tous √¢ges"
"""

import pandas as pd
import os
from pathlib import Path

print("="*80)
print("üè• NETTOYAGE DES URGENCES")
print("="*80 + "\n")

# ===== D√âFINIR LES CHEMINS =====
# D√©terminer le r√©pertoire racine du projet
SCRIPT_DIR = Path(__file__).resolve().parent
PROJECT_ROOT = SCRIPT_DIR.parent

# Chemins absolus bas√©s sur la racine du projet
RAW_DATA_DIR = PROJECT_ROOT / 'data' / 'raw'
PROCESSED_DATA_DIR = PROJECT_ROOT / 'data' / 'processed'

print(f"üìÅ R√©pertoire du projet : {PROJECT_ROOT}")
print(f"üìÅ Donn√©es brutes : {RAW_DATA_DIR}")
print(f"üìÅ Donn√©es trait√©es : {PROCESSED_DATA_DIR}\n")

# ===== CHARGER =====
print("üìÇ Chargement...")
input_file = RAW_DATA_DIR / 'urgences_sos_departement.csv'
print(f"Lecture de : {input_file}")
df = pd.read_csv(input_file)
print(f"Lignes initiales : {len(df)}")
print(f"Colonnes : {df.columns.tolist()}\n")

# ===== AFFICHER CLASSES D'√ÇGE DISPONIBLES =====
print("üìã Classes d'√¢ge disponibles :")
print(df['Classe d\'√¢ge'].unique())
print()

# ===== FILTRER "Tous √¢ges" UNIQUEMENT =====
print("üîç Filtrage 'Tous √¢ges'...")
df_filtered = df[df['Classe d\'√¢ge'] == 'Tous √¢ges'].copy()
print(f"Lignes apr√®s filtrage : {len(df_filtered)}")

# V√©rifier qu'on a bien des donn√©es
if len(df_filtered) == 0:
    print("‚ö†Ô∏è ATTENTION : Aucune ligne avec 'Tous √¢ges'")
    print("Classes disponibles :", df['Classe d\'√¢ge'].unique())
    print("\nüí° On va prendre TOUTES les classes et agr√©ger")
    df_filtered = df.copy()

# ===== RENOMMER COLONNES =====
print("\nüìù Renommage des colonnes...")
df_clean = df_filtered.rename(columns={
    '1er jour de la semaine': 'date',
    'R√©gion': 'region',
    'Taux de passages aux urgences pour grippe': 'urgences',
    'Taux d\'actes m√©dicaux SOS m√©decins pour grippe': 'sos',
    'D√©partement': 'departement'
})

# ===== CONVERTIR TYPES =====
print("üîß Conversion des types...")
df_clean['date'] = pd.to_datetime(df_clean['date'])
df_clean['urgences'] = pd.to_numeric(df_clean['urgences'], errors='coerce')
df_clean['sos'] = pd.to_numeric(df_clean['sos'], errors='coerce')

# ===== AGR√âGER PAR R√âGION + SEMAINE =====
print("\nüó∫Ô∏è Agr√©gation par r√©gion + semaine...")
print("Avant agr√©gation :", len(df_clean), "lignes")

# Grouper par date + r√©gion
df_regional = df_clean.groupby(['date', 'region']).agg({
    'urgences': 'mean',  # Moyenne des taux (car c'est un taux pour 100k hab)
    'sos': 'mean'
}).reset_index()

print(f"Apr√®s agr√©gation : {len(df_regional)} lignes")
print(f"R√©gions uniques : {df_regional['region'].nunique()}")
print(f"R√©gions : {df_regional['region'].unique()}")

# ===== SUPPRIMER NaN =====
print("\nüßπ Nettoyage des NaN...")
print(f"NaN dans urgences : {df_regional['urgences'].isnull().sum()}")
print(f"NaN dans sos : {df_regional['sos'].isnull().sum()}")

# Garder les lignes avec au moins les urgences
df_regional = df_regional[df_regional['urgences'].notna()]
print(f"Lignes apr√®s nettoyage NaN : {len(df_regional)}")

# Remplacer NaN dans sos par 0
df_regional['sos'] = df_regional['sos'].fillna(0)

# ===== TRIER =====
df_regional = df_regional.sort_values(['region', 'date']).reset_index(drop=True)

# ===== STATISTIQUES =====
print("\nüìä STATISTIQUES FINALES")
print("="*80)
print(f"P√©riode : {df_regional['date'].min()} ‚Üí {df_regional['date'].max()}")
print(f"R√©gions : {df_regional['region'].nunique()}")
print(f"\nUrgences :")
print(f"  Moyenne : {df_regional['urgences'].mean():.2f}")
print(f"  Min : {df_regional['urgences'].min():.2f}")
print(f"  Max : {df_regional['urgences'].max():.2f}")
print(f"\nSOS M√©decins :")
print(f"  Moyenne : {df_regional['sos'].mean():.2f}")
print(f"  Min : {df_regional['sos'].min():.2f}")
print(f"  Max : {df_regional['sos'].max():.2f}")

# ===== APER√áU =====
print("\nüëÄ Aper√ßu des donn√©es :")
print(df_regional.head(10))

# ===== SAUVEGARDER =====
print("\nüíæ Sauvegarde...")
PROCESSED_DATA_DIR.mkdir(parents=True, exist_ok=True)
output_path = PROCESSED_DATA_DIR / 'urgences_clean.csv'
df_regional.to_csv(output_path, index=False)
print(f"‚úÖ Fichier sauvegard√© : {output_path}")

print("\n" + "="*80)
print("‚úÖ NETTOYAGE URGENCES TERMIN√â !")
print("="*80)
